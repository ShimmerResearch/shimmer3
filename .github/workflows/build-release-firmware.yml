name: Build MSP430 Firmware

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      increment:
        description: "Which version part to increment: major, minor, patch"
        default: "patch"

permissions:
  contents: write  # Needed for git commit/push and tag creation

env:
  PROJECT_NAME: LogAndStream
  PROJECT_DIR: LogAndStream
  BUILD_CONFIG: Debug
  TAG_PREFIX: LogAndStream_Shimmer3_v
  CCS_VERSION: 12.8.1.00005
  CCS_INSTALL_DIR: /opt/ti/ccs  # Where CCS will be installed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for tags and versioning
          submodules: recursive  # Ensures log-and-stream-common is fetched

      - name: Debug path
        run: pwd

      - name: Debug contents
        run: ls

      - name: Debug directory structure
        run: |
          ls -lR ${{ env.PROJECT_DIR }}/log-and-stream-common/scripts

      - name: Increment version
        run: |
          set -euo pipefail
          chmod +x ${{ env.PROJECT_DIR }}/log-and-stream-common/scripts/increment_version.sh
          ${{ env.PROJECT_DIR }}/log-and-stream-common/scripts/increment_version.sh "${{ github.event.inputs.increment || 'patch' }}"

      - name: Save version for next steps
        id: get_version
        run: |
          set -euo pipefail
          VERSION=$(cat "${{ env.PROJECT_DIR }}/build/version.txt")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y wget xz-utils libusb-1.0-0

      - name: Download Code Composer Studio v12.8
        run: |
          wget -q https://software-dl.ti.com/ccs/esd/CCSv12/CCS_${CCS_VERSION}/CCS${CCS_VERSION}_linux-x64.tar.gz -O /tmp/ccs.tar.gz
          mkdir -p /tmp/ccs
          tar -xzf /tmp/ccs.tar.gz -C /tmp/ccs

      - name: Silent install CCS
        run: |
          /tmp/ccs/ccs_setup_${CCS_VERSION}.bin \
            --mode unattended \
            --prefix ${CCS_INSTALL_DIR} \
            --enable-components PF_MSP430 \
            --disable-components PF_C2000,PF_ARM,PF_DSP

      - name: Build MSP430 project
        run: |
          ${CCS_INSTALL_DIR}/eclipse/eclipse \
            -noSplash \
            -data ${GITHUB_WORKSPACE}/ccs_workspace \
            -application com.ti.ccstudio.apps.projectBuild \
            -ccs.projects ${PROJECT_NAME} \
            -ccs.configuration ${BUILD_CONFIG}

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: msp430-firmware
          path: |
            **/${BUILD_CONFIG}/*.out
            **/${BUILD_CONFIG}/*.hex

      - name: Find and copy hex file
        run: |
          set -euo pipefail
          mkdir -p build
          if [ -f "${{ env.PROJECT_DIR }}/Release/${{ env.PROJECT_DIR }}.hex" ]; then
            HEX_PATH="${{ env.PROJECT_DIR }}/Release/${{ env.PROJECT_DIR }}.hex"
          elif [ -f "${{ env.PROJECT_DIR }}/Debug/${{ env.PROJECT_DIR }}.hex" ]; then
            HEX_PATH="${{ env.PROJECT_DIR }}/Debug/${{ env.PROJECT_DIR }}.hex"
          else
            echo "No .hex file found in Release or Debug."
            exit 1
          fi
          cp "$HEX_PATH" "build/${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}.hex"

      - name: Commit version bump
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add "${{ env.PROJECT_DIR }}/build/version.txt" "${{ env.PROJECT_DIR }}/Shimmer_Driver/version.h"
          git commit -m "chore: bump firmware version to v${{ steps.get_version.outputs.version }}" || echo "No changes to commit"
          git push

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-hex
          path: Debug/*.hex

      - name: Create Git tag
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}"
          git push origin "${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}
          name: "${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}"
          generate_release_notes: true
          files: build/*.hex
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag submodule log-and-stream-common
        run: |
          set -euo pipefail
          cd ${{ env.PROJECT_DIR }}/log-and-stream-common
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}"
          git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/<org>/log-and-stream-common.git" "${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}"