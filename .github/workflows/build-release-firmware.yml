name: Build MSP430 Firmware

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      increment:
        description: "Which version part to increment: major, minor, patch"
        default: "patch"

permissions:
  contents: write  # Needed for git commit/push and tag creation

env:
  PROJECT_DIR: LogAndStream
  TAG_PREFIX: LogAndStream_Shimmer3_v
  CCS_INSTALL_DIR: /opt/ti/ccs  # Where CCS will be installed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for tags and versioning
          submodules: recursive  # Ensures log-and-stream-common is fetched

#      - name: Install dependencies (Wine + tools)
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y wget xz-utils wine64

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libncurses6 libncursesw6 libx11-6 libxtst6 libgtk2.0-0

      - name: Cache CCS Installation
        uses: actions/cache@v4
        with:
          path: ${{ env.CCS_INSTALL_DIR }}
          key: ccs-12.8.1-linux

#              https://dr-download.ti.com/software-development/ide-configuration-compiler-or-debugger/MD-J1VdearkvK/12.8.1/CCS12.8.1.00005_linux-x64.tar.gz

#          if [ ! -x "${{ env.CCS_INSTALL_DIR }}/ccs/eclipse/eclipse" ]; then
#            wget --timeout=60 -q --show-progress \
#              http://shimmersensing.com/images/uploads/docs/CCS12.8.1.00005_linux-x64.tar.gz
#            sudo mkdir -p /opt/ti
#            sudo tar -xzf CCS12.8.1.00005_linux-x64.tar.gz -C /opt/ti
#            sudo chmod +x /opt/ti/CCS12.8.1.00005_linux-x64/ccs_setup_12.8.1.00005.run
#            sudo /opt/ti/CCS12.8.1.00005_linux-x64/ccs_setup_12.8.1.00005.run \
#              --mode unattended --prefix "${{ env.CCS_INSTALL_DIR }}" --accept_eula Yes
#          fi

#            sudo /opt/ti/CCS12.8.1.00005_linux-x64/ccs_setup_12.8.1.00005.run \
#              --mode unattended --prefix /opt/ti/ccs --platform minimal --eula accept --debugtrace /tmp/ccs_install.log

      - name: Install Code Composer Studio (CCS 12.8.1) if not cached
        timeout-minutes: 20
        run: |
          set -euo pipefail
          set -x
          df -h
          # Only install if CCS isn't already present (cache hit will restore it)
          if [ ! -x "/opt/ti/ccs/ccs/eclipse/eclipse" ]; then
            wget --timeout=60 --tries=5 --waitretry=10 \
              http://shimmersensing.com/images/uploads/docs/CCS12.8.1.00005_linux-x64.tar.gz
            sudo mkdir -p /opt/ti
            sudo tar -xzf CCS12.8.1.00005_linux-x64.tar.gz -C /opt/ti
            sudo chmod +x /opt/ti/CCS12.8.1.00005_linux-x64/ccs_setup_12.8.1.00005.run

            # Silent install into $CCS_INSTALL_DIR
            # Note: If your runner prompts for additional components, you may need to add component flags.
            sudo /opt/ti/CCS12.8.1.00005_linux-x64/ccs_setup_12.8.1.00005.run \
              --prefix /opt/ti/ccs --enable-components PF_MSP430 --mode unattended
          fi          
          df -h

          # Put ccsbuild on PATH
          echo "${{ env.CCS_INSTALL_DIR }}/ccs/utils/bin" >> "$GITHUB_PATH"

      - name: Verify CCS install
        run: |
          set -euo pipefail
          ls -la "${{ env.CCS_INSTALL_DIR }}/ccs/utils/bin" || true
          command -v ccsbuild

      - name: Increment version
        working-directory: ${{ env.PROJECT_DIR }}/build
        run: |
          set -euo pipefail
          chmod +x ../log-and-stream-common/scripts/increment_version.sh
          ../log-and-stream-common/scripts/increment_version.sh "${{ github.event.inputs.increment }}"

      - name: Save version for next steps
        id: get_version
        run: |
          set -euo pipefail
          VERSION=$(cat "${{ env.PROJECT_DIR }}/build/version.txt")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

#      - name: Build firmware
#        run: |
#          set -euo pipefail
#          ${{ env.CCS_INSTALL_DIR }}/ccs/eclipse/ccsbuild \
#            -ccs.location "${{ env.PROJECT_DIR }}" \
#            -ccs.build "${{ env.PROJECT_DIR }}" \
#            -ccs.configuration Release

#      - name: Build firmware (CCS Project)
#        run: |
#          set -euo pipefail
#          ${{ env.CCS_INSTALL_DIR }}/eclipse/ccs_eclipsec \
#            -noSplash \
#            -data "$PWD/workspace" \
#            -build "${{ env.PROJECT_DIR }}" \
#            -cleanBuild

      - name: Build firmware (CCS Project via ccsbuild)
        run: |
          set -euo pipefail
          ccsbuild \
            -ccs.location "${{ env.PROJECT_DIR }}" \
            -ccs.build "${{ env.PROJECT_DIR }}" \
            -ccs.configuration Release
      
      - name: Find and copy hex file
        run: |
          set -euo pipefail
          mkdir -p build
          if [ -f "${{ env.PROJECT_DIR }}/Release/${{ env.PROJECT_DIR }}.hex" ]; then
            HEX_PATH="${{ env.PROJECT_DIR }}/Release/${{ env.PROJECT_DIR }}.hex"
          elif [ -f "${{ env.PROJECT_DIR }}/Debug/${{ env.PROJECT_DIR }}.hex" ]; then
            HEX_PATH="${{ env.PROJECT_DIR }}/Debug/${{ env.PROJECT_DIR }}.hex"
          else
            echo "No .hex file found in Release or Debug."
            exit 1
          fi
          cp "$HEX_PATH" "build/${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}.hex"

      - name: Commit version bump
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add "${{ env.PROJECT_DIR }}/build/version.txt" "${{ env.PROJECT_DIR }}/Shimmer_Driver/version.h"
          git commit -m "chore: bump firmware version to v${{ steps.get_version.outputs.version }}" || echo "No changes to commit"
          git push

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-hex
          path: build/*.hex

      - name: Create Git tag
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}"
          git push origin "${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}
          name: "${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}"
          generate_release_notes: true
          files: build/*.hex
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag submodule log-and-stream-common
        run: |
          set -euo pipefail
          cd ${{ env.PROJECT_DIR }}/log-and-stream-common
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}"
          git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/<org>/log-and-stream-common.git" "${{ env.TAG_PREFIX }}${{ steps.get_version.outputs.version }}"